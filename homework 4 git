Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub

Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.

Как отправить ДЗ на проверку.
 1. Создайте текстовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON
 4. Создать внешний репозиторий c названием JSON.
 // Создаем вручную
 5. Клонировать репозиторий JSON на локальный компьютер.
// Git clone ссылка на папку
 6. Внутри локального JSON создать файл “new.json”.
// vim new.json
 7. Добавить файл под гит.
//git add new.json  
 8. Закоммитить файл.
 //git commit
 9. Отправить файл на внешний GitHub репозиторий.
 //git push
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
 //vim new.json, вводим данные
 11. Отправить изменения на внешний репозиторий.
 //git add; git commit new.json -m "Personal info"; git push
 12. Создать файл preferences.json
//vim preferences.json, вводим данные
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
 //i (insert), вводим данные, ESQ, :wq
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
//vim skills.json, вводим данные
 15. Отправить сразу 2 файла на внешний репозиторий.
 //git add . ; git commit -m "new files"; git push
 16. На веб интерфейсе создать файл bug_report.json.
 // Создаем вручную через add file-> create new file->bug_report.json
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 // Сохраняем через кнопку commit new file
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 //Через кнопку - "карандаш" edit this file
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 //commit
 20. Синхронизировать внешний и локальный репозиторий JSON
 //git fetch; git pull


XML
 21. Создать внешний репозиторий c названием XML.
 22. Клонировать репозиторий XML на локальный компьютер.
 // git clone "ссылка"
 23. Внутри локального XML создать файл “new.xml”.
 // touch new.xml
 24. Добавить файл под гит.
 // git add new.xml
 25. Закоммитить файл.
 // git commit -m 
 26. Отправить файл на внешний GitHub репозиторий.
 // git push
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
 // git commit -a -m "info"
 28. Отправить изменения на внешний репозиторий.
 // git push
 29. Создать файл preferences.xml
 // vim preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
 //vim preferences.xml, вводим данные
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
 //vim skills.xml, вводим данные
 32. Сделать коммит в одну строку.
 // git add . && git commit -m "new files"
 33. Отправить сразу 2 файла на внешний репозиторий.
 // git push
 34. На веб интерфейсе создать файл bug_report.xml.
 // Создаем вручную через add file-> create new file->bug_report.xml
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 // Жмем commit changes
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 // Через кнопку - "карандаш" edit this file
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 // Жмем commit changes
 38. Синхронизировать внешний и локальный репозиторий XML
 // git pull

TXT
 1. Создать внешний репозиторий c названием TXT.
 2. Клонировать репозиторий TXT на локальный компьютер.
 // git clone https://github.com/fang313/TXT.git
 3. Внутри локального TXT создать файл “new.txt”.
 // touch new.txt
 4. Добавить файл под гит.
 // git add new.txt
 5. Закоммитить файл.
 // git commit -m "new file"
 6. Отправить файл на внешний GitHub репозиторий.
 // git push
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
 // vim new.txt
 8. Отправить изменения на внешний репозиторий.
 // git commit -am "bio info"
 9. Создать файл preferences.txt
 // vim preferences.txt
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
 // вносим информацию
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
 // vim skills.txt 
 12. Сделать коммит в одну строку.
 // git add . && git commit -m "new files"
 13. Отправить сразу 2 файла на внешний репозиторий.    
 // git push
 14. На веб интерфейсе создать файл bug_report.txt.
 // Создаем вручную через add file-> create new file->bug_report.txt
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 // Жмем commit changes
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 // Через кнопку - "карандаш" edit this file
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 // Жмем commit changes 
 18. Синхронизировать внешний и локальный репозиторий TXT
 // git pull
